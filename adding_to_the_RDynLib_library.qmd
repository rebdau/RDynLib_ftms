---
title: "Selecting one representative tree per feature"
format:
  html:
    toc: true
    self-contained: true
author: "Ahlam Mentag, Johannes Rainer"
---

## Shiny Documents
This Quarto document presents the analysis of FTMS flaxseed data for selecting 
one representative tree per feature.

```{r}
library(MsExperiment)
library(Spectra)
library(dplyr)
library(tidyr)
library(BiocParallel)
library(xcms)
library(MsExperiment)
library(Spectra)
library(MSnbase)
library(readxl)
register(SerialParam())
```

first we load the XcmsExperiment ftms object

```{r}
pth <- "C:/Users/amentag/Desktop/Rcodes/RDynLib_ftms/"
load(file = file.path(pth, "data/ftms_final2.RData"))
class(ftms)
```

Next, we try "featureSpectra()" function on the ftms object.

```{r}
ms2 <- featureSpectra(ftms, msLevel = 2)

msLevel(ms2) |>
  table()
```

it returns 1679 MS level 2

Here we print the initial number of MSLevels.

```{r}
s <- spectra(ftms)
table(msLevel(s))
```

this function takes as input the XcmsExperiment object, then it extract the MS2
spectra using "featureSpectra()" function, after that we extract from the
initial object only the MS3 fragments that have a parent ion in the result of
"featureSpectra()" function, and then we do the same process for MS4.

```{r}
ftms_all_levels <- function(ftms) {

  ms2 <- featureSpectra(ftms, msLevel = 2)
  cat("Number of MS2 spectra found:", length(ms2), "\n")

  res <- lapply(unique(ms2$dataOrigin), function(origin) {
    ms2_subset <- ms2[ms2$dataOrigin == origin]

    ms3_filtered <- filterDataOrigin(filterMsLevel(spectra(ftms), 3), origin)
    ## To support n:m matches
    m <- findMatches(ms2_subset$acquisitionNum, ms3_filtered$precScanNum)
    cat("Number of MS3 matched to MS2:", length(m), "\n")
    ms3_filtered <- ms3_filtered[to(m)]
    ms3_filtered$feature_id <- ms2_subset$feature_id[from(m)]

    ms4_filtered <- filterDataOrigin(filterMsLevel(spectra(ftms), 4), origin)
    m <- findMatches(ms3_filtered$acquisitionNum, ms4_filtered$precScanNum)
   
    ms4_filtered <- ms4_filtered[to(m)]
    ms4_filtered$feature_id <- ms3_filtered$feature_id[from(m)]

    # Combine spectra for this origin
    c(ms2_subset, ms3_filtered, ms4_filtered)
  })
    do.call(c, res)
 
}


ftms_levels <- ftms_all_levels(ftms)


table(msLevel(ftms_levels))
```

Checking the MSn data for one feature - and evaluate if the relationship
between the MSn spectra is correct.

```{r}
ft <- "FT4282"

a <- ftms_levels[ftms_levels$feature_id == ft]
a

#' split by dataOrigin
al <- split(a, a$dataOrigin)

al[[1]]

spectraData(al[[1]], columns = c("msLevel", "acquisitionNum", "precScanNum"))
#' This looks correct. Testing the next

spectraData(al[[2]], columns = c("msLevel", "acquisitionNum", "precScanNum"))
#' This too.

ft <- "FT0649"
a <- ftms_levels[ftms_levels$feature_id == ft]
a

#' split by dataOrigin
al <- split(a, a$dataOrigin)

spectraData(al[[1]], columns = c("msLevel", "acquisitionNum", "precScanNum")) |>
    as.data.frame()
#' Looks correct. Let's see what filterPrecursorScan does

filterPrecursorScan(al[[1]], 3851)
filterPrecursorScan(al[[1]], 3870)
filterPrecursorScan(al[[1]], 3905)
filterPrecursorScan(al[[1]], 3919)
#' Seems to be OK
```

the resulting spectra object contains 1679 MS2, 1858 MS3, and 926 MS4.



```{r}
spectraData(ftms_levels)
```



<<<<<<< HEAD
```{r}

=======
>>>>>>> jomain


This function creates MSntreeID column that gouped related scans into
fragmentation trees based on their parent-child relationships.
```{r}

assign_msntree_id <- function(ftms_levels) {
  scan_index <- scanIndex(ftms_levels)
  prec_scan_num <- precScanNum(ftms_levels)
  ms_level <- msLevel(ftms_levels)
  data_origin <- dataOrigin(ftms_levels)

  tree_id <- rep(NA, length(scan_index))
  global_counter <- 0

  for (origin in unique(data_origin)) {
    origin_indices <- which(data_origin == origin)
    origin_scan_index <- scan_index[origin_indices]
    origin_prec_scan_num <- prec_scan_num[origin_indices]
    origin_ms_level <- ms_level[origin_indices]

    origin_tree_id <- rep(NA, length(origin_scan_index))

    for (i in seq_along(origin_scan_index)) {
      if (origin_ms_level[i] == 4) {

        parent_ms3 <- which(origin_scan_index == origin_prec_scan_num[i] & origin_ms_level == 3)
        if (length(parent_ms3) > 0) {
          parent_ms2 <- which(origin_scan_index == origin_prec_scan_num[parent_ms3] & origin_ms_level == 2)
          if (length(parent_ms2) > 0) {
            origin_tree_id[i] <- origin_tree_id[parent_ms2]
          }
        }
      } else if (origin_ms_level[i] == 3) {

        parent_ms2 <- which(origin_scan_index == origin_prec_scan_num[i] & origin_ms_level == 2)
        if (length(parent_ms2) > 0) {
          origin_tree_id[i] <- origin_tree_id[parent_ms2]
        }
      } else if (origin_ms_level[i] == 2) {
        global_counter <- global_counter + 1
        origin_tree_id[i] <- global_counter
      }
    }
    tree_id[origin_indices] <- origin_tree_id
  }

  return(tree_id)
}

msntree_ids <- assign_msntree_id(ftms_levels)

ftms_levels$MSntreeID <- msntree_ids
spectraVariables(ftms_levels)

```


```{r}
spectraData(ftms_levels)
```

```{r}
length(unique(msntree_ids))
```

we have 1679 fragmentation tree.




```{r}
# we stored the tree ids and the msLevels to a dataframe
tree_ids <- ftms_levels$MSntreeID
ms_levels <- msLevel(ftms_levels)
df <- data.frame(
  MSntreeID = tree_ids,
  MSLevel = ms_levels
)


#here we take count the last level of each tree
library(dplyr)
max_level_per_tree <- df %>%
  group_by(MSntreeID) %>%
  summarise(max_level = max(MSLevel), .groups = "drop")


table(max_level_per_tree$max_level)

```

The number of trees that go up to MS2 level is : 415
The number of trees that go up to MS3 level is : 338
The number of trees that go up to MS4 level is : 926



Next we select one most representative tree per feature based on the longest one
and if we have many, we select one tree with the highest MS2 precursor intensity

```{r}
library(Spectra)
library(dplyr)

filtered_trees_spectra <- function(db) {
  
  # Extract metadata from the Spectra object
  sps_data <- spectraData(db)

  # Split by feature_id
  feat_block <- split(sps_data, f = sps_data$feature_id)

  # Selection function applied to each feature block
  selection <- function(feature_block) {
    #Select the most frequent MSnTreeID
    max_number <- max(table(feature_block$MSntreeID))
    FTmax <- names(table(feature_block$MSntreeID))[table(feature_block$MSntreeID) == max_number]
    feat_block_sel1 <- feature_block[feature_block$MSntreeID %in% as.numeric(FTmax), ]
    feat_block_sel1_MS2 <- feat_block_sel1[feat_block_sel1$msLevel == 2, ]
    
    if (nrow(feat_block_sel1_MS2) == 0) return(NULL)
    #Select the one with the highest MS2 precursor Intensity 
    index <- order(feat_block_sel1_MS2$precursorIntensity, decreasing = TRUE)[1]
    selected_FT <- feat_block_sel1_MS2$MSntreeID[index]
    feature_block[feature_block$MSntreeID == selected_FT, ]
  }

  # Apply selection across all feature blocks
  selected_trees_list <- lapply(feat_block, selection)
  selected_trees_df <- do.call(rbind, selected_trees_list)

  # Subset the original spectra object
  selected_sps <- db[db$MSntreeID %in% selected_trees_df$MSntreeID]

  cat("Spectra object filtré avec succès!\n")
  return(selected_sps)
}


ftms_one_tree <- filtered_trees_spectra(ftms_levels)

msLevel(ftms_one_tree) |> table()

```

after selecting one representative tree per feature we have now:
MS2 : 437, MS3 : 523, MS4 : 262


Finally we verify if the number of unique features corresponds to the number of 
unique MSntreeID to ensure that we have one tree per feature.
```{r}
length(unique(ftms_one_tree$feature_id))
```


```{r}
length(unique(ftms_one_tree$MSntreeID))
```

we have 437 unique feature and unique MSntreeID, That's mean that we have for 
each feature one representative tree.


Now we save the resulting ftms spectra object to a local directory.
```{r}
save(ftms_one_tree, file = "C:/Users/amentag/Desktop/Rcodes/RDynLib_ftms/data/qtof.RData")
```





