---
title: "Untitled"
format: html
server: shiny
---

## Shiny Documents

This Quarto document is made interactive using Shiny. Interactive documents allow readers to modify parameters and see the results immediately. Learn more about Shiny interactive documents at <https://quarto.org/docs/interactive/shiny/>.

## Inputs and Outputs

You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change. This demonstrates how a standard R plot can be made interactive:

```{r}
library(MsExperiment)
library(Spectra)
library(dplyr)
library(tidyr)
library(BiocParallel)
library(xcms)
library(MsExperiment)
library(Spectra)
library(MSnbase)
library(readxl)
register(SerialParam())
```

first we load the XcmsExperiment ftms object

```{r}
load(file = "C:/Users/amentag/Desktop/Rcodes/RDynLib_ftms/data/ftms_final2.RData")
class(ftms)
```

Next, we try "featureSpectra()" function on the ftms object.

```{r}

ms2 <- featureSpectra(ftms, msLevel = 2)


msLevel(ms2) |>
  table()
```

it returns 1679 MS level 2

Here we print the initial number of MSLevels.

```{r}
s <- spectra(ftms)
table(msLevel(s))
```

this function takes as input the XcmsExperiment object, then it extract the MS2
spectra using "featureSpectra()" function, after that we extract from the
initial object only the MS3 fragments that have a parent ion in the result of 
"featureSpectra()" function, and then we do the same process for MS4.

```{r}
ftms_all_levels <- function(ftms) {
  
  ms2 <- featureSpectra(ftms, msLevel = 2)
  cat("Number of MS2 spectra found:", length(ms2), "\n")
  
  combined_spectra_list <- list() 
  
  for (origin in unique(spectraData(ms2)$dataOrigin)) {
    ms2_subset <- ms2[ms2$dataOrigin == origin]
    
    ms3 <- filterMsLevel(spectra(ftms), msLevel = 3)
    ms3_filtered <- ms3[
      ms3$dataOrigin == origin &
      ms3$precScanNum %in% ms2_subset$scanIndex
    ]
    
    ms4 <- filterMsLevel(spectra(ftms), msLevel = 4)
    ms4_filtered <- ms4[
      ms4$dataOrigin == origin &
      ms4$precScanNum %in% ms3_filtered$scanIndex
    ]
    
    # Combine spectra for this origin
    combined_origin_spectra <- c(ms2_subset, ms3_filtered, ms4_filtered)
    
    # Only add if not empty
    if (length(combined_origin_spectra) > 0) {
      combined_spectra_list[[length(combined_spectra_list) + 1]] <-
        combined_origin_spectra
    }
  }
  

    final_feature_data <- do.call(c, combined_spectra_list)

  
  return(final_feature_data)
}
ftms_levels <- ftms_all_levels(ftms)
class(ftms_levels)


table(msLevel(ftms_levels))
```

the resulting spectra object contains 1679 MS2, 1858 MS3, and 926 MS4.

```{r}

```

```{r}
spectraData(ftms_levels)
```

```{r}
spectraData(ftms_levels)[!is.na(precScanNum(ftms_levels)), ]
  
```

The precScanNum is not empty for all spectra.

```{r}
spectraData(all_ftms)[!is.na(precScanNum(all_ftms)), ]

```

This function create MSntreeID column that gouped related scans into
fragmentation trees based on their parent-child relationships.
```{r}

assign_msntree_id <- function(ftms_levels) {
  scan_index <- scanIndex(ftms_levels)
  prec_scan_num <- precScanNum(ftms_levels)
  ms_level <- msLevel(ftms_levels)
  data_origin <- dataOrigin(ftms_levels)
  
  tree_id <- rep(NA, length(scan_index))
  global_counter <- 0
  
  for (origin in unique(data_origin)) {
    origin_indices <- which(data_origin == origin)
    origin_scan_index <- scan_index[origin_indices]
    origin_prec_scan_num <- prec_scan_num[origin_indices]
    origin_ms_level <- ms_level[origin_indices]
    
    origin_tree_id <- rep(NA, length(origin_scan_index))
    
    for (i in seq_along(origin_scan_index)) {
      if (origin_ms_level[i] == 4) {
        
        parent_ms3 <- which(origin_scan_index == origin_prec_scan_num[i] & origin_ms_level == 3)
        if (length(parent_ms3) > 0) {
          parent_ms2 <- which(origin_scan_index == origin_prec_scan_num[parent_ms3] & origin_ms_level == 2)
          if (length(parent_ms2) > 0) {
            origin_tree_id[i] <- origin_tree_id[parent_ms2]
          }
        }
      } else if (origin_ms_level[i] == 3) {
        
        parent_ms2 <- which(origin_scan_index == origin_prec_scan_num[i] & origin_ms_level == 2)
        if (length(parent_ms2) > 0) {
          origin_tree_id[i] <- origin_tree_id[parent_ms2]
        }
      } else if (origin_ms_level[i] == 2) {
        global_counter <- global_counter + 1
        origin_tree_id[i] <- global_counter
      }
    }
    tree_id[origin_indices] <- origin_tree_id
  }
  
  return(tree_id)
}

msntree_ids <- assign_msntree_id(ftms_levels)

ftms_levels$MSntreeID <- msntree_ids
spectraVariables(ftms_levels)  

```


```{r}
spectraData(ftms_levels)
```

```{r}
length(unique(msntree_ids))
```

we have 1679 fragmentation tree.

```{r}
# we stored the tree ids and the msLevels into a dataframe
tree_ids <- ftms_levels$MSntreeID
ms_levels <- msLevel(ftms_levels)
df <- data.frame(
  MSntreeID = tree_ids,
  MSLevel = ms_levels
)


#here we take count the last level of each tree 
library(dplyr)
max_level_per_tree <- df %>%
  group_by(MSntreeID) %>%
  summarise(max_level = max(MSLevel), .groups = "drop")


table(max_level_per_tree$max_level)

```

The number of trees that go up to MS2 level is : 415
The number of trees that go up to MS3 level is : 338
The number of trees that go up to MS4 level is : 926



```{r}

feature_matrix <- read.table("C:/Users/amentag/Desktop/Rcodes/RDynLib_ftms/data/Feature_matrix/feature_matrix_ftms.txt", sep = "\t", header = TRUE)
head(feature_matrix)
```

```{r}
#'below my old function that select the longest tree 
#'+ the highest MS2 precursor intensity if we have more then one longest tree
#'but here we need feature name!

filtered_trees <- function(db){
  
  feat.block <- split(db, f = db$feature_name)
  selection <- function(feature.block) {
    
    max.number <- max(table(feature.block$MSntreeID))
    FTmax <- names(table(feature.block$MSntreeID))[table(feature.block$MSntreeID) == max.number]
    feat.block.sel1 <- feature.block[feature.block$MSntreeID %in% as.numeric(FTmax),]
    
    
    feat.block.sel1.MS2 <- feat.block.sel1[feat.block.sel1$msLevel == 2,]
    index <- order(feat.block.sel1.MS2$precursorIntensity, decreasing = TRUE)[1]
    selected.FT <- feat.block.sel1.MS2$MSntreeID[index]
    feature.block[feature.block$MSntreeID == selected.FT,]
  }
  
  
  selected.trees.list <- lapply(feat.block, FUN = selection)
  
  selected.trees <- do.call(rbind, selected.trees.list)
  
  selected_trees_result <- selected.trees[, c("feature_name", "MSntreeID")]
  
  db <- db %>%
    filter(MSntreeID %in% selected_trees_result$MSntreeID)
  
  cat("Base de données filtrée avec succès!\n")
  return(db)
}

```


```{r}



```

