---
title: "Centroiding of the profile-mode LC-MS/MS data"
format: html
tbl-cap-location: bottom
editor: visual
date: 'Compiled: `r format(Sys.Date(), "%B %d, %Y")`'
---

# Introduction

This document defines and describes the centroiding of the profile-mode FTMS LC-MS/MS data. The fragment spectra (MS1-MS4) seem all to be in centroid mode, while the MS1 data is not. So, we need to centroid specifically the MS1 spectra.

# Data import and centroiding

We use the *Spectra* package, in particular its `pickPeaks()` function to perform the centroiding. We perform the analysis separately for each original mzXML file and export the data directly to a file in mzML format.

```{r}
#| message: false

#' Load required libraries
library(Spectra)

#' Define the paths to the original mzXML files with the profile-mode data
#' and the path where we want to export the centroided mzML data.
MZXML_PATH <- "data/mzXML"
MZML_PATH <- "data/mzML"

#' List all files
fls <- dir(MZXML_PATH, full.name = TRUE)

```

We first inspect the profile-mode data and dry-run the centroiding on one spectrum.

```{r}
a <- filterMsLevel(Spectra(fls[1]), 1L)[4]

par(mfrow = c(1, 2))
plotSpectra(a)
grid()
filterMzRange(a, c(372.5, 373.5)) |>
    plotSpectra()
grid()
```

In profile-mode data, each mass peak is represented by a distribution of signal. The centroiding will select a single, representative, mass peak for each such distribution. The algorithm we apply first estimates local maxima in each MS1 spectrum and for each it reports the peak with the maximum intensity. We further *refine* the m/z of the reported mass peak using an intensity-weighted average of the mass peak and the neighboring 2 peaks (`k = 2L`), if their intensity is at least 1/3 (`threshold = 0.33`) of the reported mass peak.

```{r}

a_c <- pickPeaks(a, halfWindowSize = 10L, k = 2L, threshold = 0.33)

par(mfrow = c(2, 2))
plotSpectra(a)
grid()
plotSpectra(a_c)
grid()
filterMzRange(a, mz = c(372.5, 373.5)) |>
    plotSpectra()
grid()
filterMzRange(a_c, mz = c(372.5, 373.5)) |>
    plotSpectra()
grid()

```

We plot the signal also for another peak:

```{r}
par(mfrow = c(1, 2))
filterMzRange(a, mz = c(200.15, 200.2)) |>
    plotSpectra()
grid()
filterMzRange(a_c, mz = c(200.15, 200.2)) |>
    plotSpectra()
grid()
```

While we reduced the profile-mode peaks to single mass peaks there is still some remains of the fast fourier transform artefact present, especially for the first example.

We proceed now and centroid all data files with the settings above.

```{r}
if (!dir.exists(MZML_PATH))
    dir.create(MZML_PATH, recursize = TRUE)

for (f in fls) {
    a <- Spectra(f)
    fn <- file.path(MZML_PATH, sub("mzXML$", "mzML", basename(f)))
    a <- pickPeaks(a, halfWindowSize = 10L, k = 2L, threshold = 0.33)
    export(a, backend = MsBackendMzR(), file = fn,
           format = "mzML", copy = TRUE)
}

b <- Spectra(fn)
all(centroided(b))

```

```{r}
sample_data_ftms <- read_xlsx("C:/Users/amentag/Desktop/Rcodes/RDynLib_ftms/data/ftms_data_files.xlsx") |>
    as.data.frame()
file <- "C:/Users/amentag/Desktop/Rcodes/RDynLib_ftms/data/mzML/"
ftms <- readMsExperiment(paste0(file, sample_data_ftms$data_file),
                         sampleData = sample_data_ftms)
ftms
```

```{r}
s <- spectra(ftms)
spectraData(s)
```

```{r}
library(dplyr)
library(readr)
library(purrr)
read_csv_safely <- function(file_path, sep = "\t", quote = "\"", header = TRUE, col_types = NULL) {
  if (!file.exists(file_path)) {
    stop(paste("Le fichier n'existe pas :", file_path))
  }
  
  tryCatch({
    data <- read_delim(file_path, delim = sep, quote = quote, col_names = header, col_types = col_types)
    return(as.data.frame(data))  
  }, error = function(e) {
    message("Erreur lors de la lecture avec read_delim : ", e$message)
    message("Essai avec read.csv...")
    data <- read.csv(file_path, sep = sep, quote = quote, header = header, stringsAsFactors = FALSE)
    return(as.data.frame(data))  
  })
}


ms2_spectra_path <- "C:/Users/amentag/Desktop/these/Ahlam/these/RDynLib/database_QTOF_neg/CSV/MS2spectra.csv"
col_types_spectra <- cols(
  MS2PEAKLIST = col_character(),
  MS2INTENSITYLIST = col_character()
)

ms2<- read_csv_safely(ms2_spectra_path, sep = "\t", col_types = col_types_spectra)

head(ms2)
```

```{r}

# Convert comma-separated strings into vectors and compare their lengths
ms2$peaks_count <- sapply(strsplit(ms2$MS2PEAKLIST, ","), length)
ms2$intensities_count <- sapply(strsplit(ms2$MS2INTENSITYLIST, ","), length)

# Create a logical column indicating if counts match
ms2$counts_match <- ms2$peaks_count == ms2$intensities_count

# View summary
table(ms2$counts_match)

# Optionally, display mismatched rows
ms2_mismatched <- ms2 %>% filter(!counts_match)
head(ms2_mismatched)

```

# Questions and notes

-   [ ] There seems to be still some fourier transform artefact present in the data after the centroiding. Maybe we could/should use another software for the centroiding? Maybe the original Thermo software?

# Session information

```{r}
sessionInfo()
```
